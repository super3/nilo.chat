name: Build and Deploy Frontend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci || npm install

      # Run tests with coverage before building
      - name: Run tests with coverage
        run: npm run test:coverage

      # Generate a unique build ID based on timestamp and commit hash
      - name: Generate build ID
        id: build_id
        run: echo "BUILD_ID=$(date +%Y%m%d%H%M%S)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build with cache busting
        run: |
          # Pass build ID to the build process
          VITE_BUILD_ID=${{ env.BUILD_ID }} npm run build
          
          # Add build ID to index.html for cache busting
          sed -i "s|</head>|<meta name=\"build-id\" content=\"${{ env.BUILD_ID }}\">\n</head>|g" dist/index.html
          
          # Add timestamp comments to all HTML files
          find dist -name "*.html" -exec sh -c "echo '<!-- Build: ${{ env.BUILD_ID }} - $(date) -->' >> {}" \;

      - name: Create cache control files
        run: |
          # Create .htaccess for Apache servers
          cat > dist/.htaccess << EOL
          <FilesMatch "index\.html$">
            Header set Cache-Control "no-cache, no-store, must-revalidate"
            Header set Pragma "no-cache"
            Header set Expires "0"
          </FilesMatch>
          
          <FilesMatch "\.(js|css|png|jpg|jpeg|gif|ico|svg|woff2)$">
            Header set Cache-Control "public, max-age=31536000, immutable"
          </FilesMatch>
          EOL

      - name: Create 404.html file
        run: cp dist/index.html dist/404.html

      - name: Create CNAME file
        run: echo 'nilo.chat' > dist/CNAME

      - name: Debug - List dist contents
        run: |
          echo "Contents of dist directory:"
          ls -la dist
          echo "Contents of CSS directory:"
          ls -la dist/css
          echo "Contents of JS directory:"
          ls -la dist/js
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  # Deploy job
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4